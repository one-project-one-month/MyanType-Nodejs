generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  testSessions      TestSession[]
  themes            Theme[]
  customTexts       CustomText[]
  challengesCreated Challenge[]   @relation("Inviter")
  challengesJoined  Challenge[]   @relation("Invitee")
}

model CustomText {
  id      Int    @id @default(autoincrement())
  content String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  testSessions TestSession[]
  createdAt    DateTime      @default(now())
  challenges   Challenge[]   @relation("CustomTextToChallenge")
}

model TestSession {
  id Int @id @default(autoincrement())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  customText   CustomText? @relation(fields: [customTextId], references: [id])
  customTextId Int?

  mode ModeType

  timeLimit Int?
  wordLimit Int?

  startedAt DateTime @default(now())

  result TestResult?

  challengeAsInviter Challenge? @relation("InviterSession")
  challengeAsInvitee Challenge? @relation("InviteeSession")
}

model TestResult {
  id Int @id @default(autoincrement())

  testSession   TestSession @relation(fields: [testSessionId], references: [id])
  testSessionId Int         @unique

  wpm             Float
  raw             Int
  accuracy        Float
  charactersTyped Int
  correct         Int
  incorrect       Int
  extra           Int
  miss            Int
  consistency     Int

  timeTaken Int
}

model Theme {
  id   Int    @id @default(autoincrement())
  name String

  settings Json

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model Challenge {
  id   String @id @default(uuid())
  code String @unique

  inviter   User   @relation("Inviter", fields: [inviterId], references: [id])
  inviterId String

  invitee   User?   @relation("Invitee", fields: [inviteeId], references: [id])
  inviteeId String?

  status ChallengeStatus @default(PENDING)

  customText   CustomText? @relation("CustomTextToChallenge", fields: [customTextId], references: [id])
  customTextId Int?

  createdAt DateTime  @default(now())
  startedAt DateTime?
  endedAt   DateTime?

  inviterSession   TestSession? @relation("InviterSession", fields: [inviterSessionId], references: [id])
  inviterSessionId Int?         @unique

  inviteeSession   TestSession? @relation("InviteeSession", fields: [inviteeSessionId], references: [id])
  inviteeSessionId Int?         @unique
}

enum ModeType {
  TIME
  WORDS
  QUOTE
  CUSTOM
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}
